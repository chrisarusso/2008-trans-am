<?php
/* $Id: ip2cc.module 371 2007-10-18 15:47:58Z rfay $ */

/*
 * "This 'work' uses the IP-to-Country Database
 *  provided by WebHosting.Info (http://www.webhosting.info),
 *  available from http://ip-to-country.webhosting.info."
 */

/**
 * Implementation of hook_help().
 */
function ip2cc_help($section = 'admin/help#ip2cc') {
  switch ($section) {
    case 'admin/modules#description':
      return t('Adds support for ip-to-country.com for other modules.');
      break;
    case 'admin/settings/ip2cc':
      $output = t('Here you can configure the ip2cc module.');
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm
 */
function ip2cc_perm() {
  return array('view IP address', 'view country', 'view network name');
}
 
/**
 * Implementation of hook_menu().
 */
function ip2cc_menu($may_cache) {
  $items = array();
  $access = user_access('administer site configuration');

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/ip2cc',
      'title' => t('IP to Country'),
      'description' => t('Administer IP to Country.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('ip2cc_admin_settings'),
      'access' => $access,
      'type' => MENU_NORMAL_ITEM,
    );

    $items[] = array('path' => 'admin/settings/ip2cc/manage',
      'title' => t('Manage settings'),
      'access' => $access,
      'weight' => -10,
      'type' => MENU_DEFAULT_LOCAL_TASK
    );
    $items[] = array('path' => 'admin/settings/ip2cc/update',
      'title' => t('Update'),
      'callback' => 'ip2cc_update',
      'access' => $access,
      'weight' => -9,
      'type' => MENU_LOCAL_TASK
    );
  }

  return $items;
}

/**
 * Implementation of hook_settings().
 */
function ip2cc_admin_settings() {
  $form['ip2cc_placement'] = array(
    '#type' => 'fieldset',
    '#title' => t('Where to show the flag'),
  );
  $form['ip2cc_placement']['ip2cc_node_types'] = array(
    '#type' => 'select',
    '#title' => t('Node types to display flag for'),
    '#default_value' => variable_get('ip2cc_node_types', array()),
    '#options' => node_get_types('names'),
    '#multiple' => TRUE,
    '#description' => t('Flag will display on the node pages themselves (as dictated by the theme).<br/>To display flag on main feed pages, check the box below.'),
  );
  $form['ip2cc_placement']['ip2cc_node'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display in node feeds (optional)'),
    '#return_value' => '1',
    '#default_value' => variable_get('ip2cc_node',0),
  );
  $form['ip2cc_placement']['ip2cc_comment'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display in comment feeds (optional)'),
    '#return_value' => '1',
    '#default_value' => variable_get('ip2cc_comment',0),
  );

  return system_settings_form($form);
}

function ip2cc_update() {
  return drupal_get_form('ip2cc_update_form');
}

function ip2cc_update_form() {
  $form = array();
  $form['ip2cc_update_current'] = array(
    '#type' => 'fieldset',
    '#title' => t('Information'),
  );
  $form['ip2cc_update_current']['current'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount: of entries'),
    '#default_value' => db_result(db_query('SELECT COUNT(*) FROM {ip2cc}')),
    '#disabled' => TRUE,
  );
  $form['ip2cc_update_detail'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update details'),
  );
  $form['ip2cc_update_detail']['start'] = array(
    '#type' => 'textfield',
    '#title' => t('Start entry'),
    '#default_value' => '1',
  );
  $form['ip2cc_update_detail']['end'] = array(
    '#type' => 'textfield',
    '#title' => t('End entry'),
    '#default_value' => _ip2cc_batch_count("ipdb.mysql"),
  );
  $form['ip2cc_update_detail']['flush'] = array(
    '#type' => 'checkbox',
    '#title' => t('Flush?'),
    '#return_value' => '1',
    '#default_value' => '0',
  );
  $form['ip2cc_update_detail']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function ip2cc_update_form_submit($form_id, $form_values) {
  if ($form_values['flush']) {
    db_query("DELETE FROM {ip2cc}");
  }
  _ip2cc_batch_insert("ipdb.mysql", (int)$form_values['start'], (int)$form_values['end']);
  drupal_set_message(t("Successfully updated entry %start to %end", array('%start' => $form_values['start'], '%end' => $form_values['end'])));
}

/**
 * Implementation of hook_nodeapi().
 */
function ip2cc_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'load':
      return db_fetch_array(db_query("SELECT hostname FROM {ip2cc_node} WHERE nid = %d", $node->nid));
      break;

    case 'insert':
    case 'update':
      ip2cc_set_node($node);
      break;

    case 'delete':
      db_query("DELETE FROM {ip2cc_node} WHERE nid = %d", $node->nid);
      break;
  }
}

/**
 * Implementation of hook_update().
 */
function ip2cc_set_node($node) {
  $node_count = db_result(db_query("SELECT COUNT(hostname) FROM {ip2cc_node} WHERE nid = %d", $node->nid));
  if ($node_count == 0) {
    db_query("INSERT INTO {ip2cc_node} (nid, hostname) VALUES (%d, '%s')", $node->nid, $_SERVER['REMOTE_ADDR']);
  }
  else {
    db_query("UPDATE {ip2cc_node} SET hostname = '%s' WHERE nid = %d", $_SERVER['REMOTE_ADDR'], $node->nid);
  }
}

/**
 * Implementation of hook_link().
 */
function ip2cc_link($type, $node = 0, $main = 0) {
  $links = array();

  $node_type = in_array($node->type, variable_get('ip2cc_node_types', array()), TRUE);
  if ($type == 'node' && variable_get('ip2cc_node', '0') == '1' && $node_type && isset($node->hostname) && !empty($node->hostname)) {
    if ($output = theme('ip2cc_ip_flag', $node->hostname)) {
      $links['ip2cc_info'] = array(
        'title' => $output,
        'html' => TRUE,
      );
    }
  }
  else if ($type == 'comment' && variable_get('ip2cc_comment', '0') == '1') {
    $result = db_query('SELECT c.hostname FROM {comments} c WHERE c.cid = %d', $node->cid);
    $comment = db_fetch_object($result);
    if ($output = theme('ip2cc_ip_flag', $comment->hostname)) {
      $links['ip2cc_info'] = array(
        'title' => $output,
        'html' => TRUE,
      );
    }
  }

  return $links;
}

function ip2cc_get_country($addr) {
  $ip = _ip2cc_inet_aton($addr);
  $result = db_query("SELECT i.*,c.* FROM {ip2cc} i LEFT JOIN {iso3166} c ON i.country_code = c.country_code2 WHERE ip_from <= %s AND ip_to >= %s",$ip,$ip);
  while ($co = db_fetch_object($result)) {
    $co->ip = $addr;
    return $co;
  }
  return NULL;
}

function theme_ip2cc_flag($co, $addr = '') {
  if (!user_access('view country')) {
    return "";
  }

  if (isset($co)) {
    $cc = strtolower($co->country_code2);
    if (empty($cc)) {
      $cc = "unknown";
    }
    $title = "$cc $co->country_name";
    if (user_access('view IP address')) {
      $title .= " $co->ip";
    }
    if (user_access('view network name')) {
      $title .= " $co->net_name";
    }
  } else {
    $cc = 'unknown';
    $title = (empty($addr))?'unknown':$addr;
  }
  $src = url(drupal_get_path('module','ip2cc') . "/flags/$cc.png");
  $attribs = array('width' => 14, height => 14, 'alt' => "$cc", 'title' => "$title");
  return "<img src=\"$src\" ".drupal_attributes($attribs)." />";
}

function theme_ip2cc_ip_flag($addr) {
  $country = module_invoke('ip2cc', 'get_country', $addr);
  if ($output = theme('ip2cc_flag', $country, $addr)) {
    $output = "<span>$output</span>";
  }
  return $output;
}

function theme_ip2cc_ip_flag_long($addr) {
  $country = module_invoke('ip2cc', 'get_country', $addr);
  if ($output = theme('ip2cc_flag', $country, $addr)) {
    $output = "<span>$output";
    if (user_access('view IP address')) {
      $output .= "$country->ip";
    }
    $output .= "</span>";
  }
  return $output;
}

function _ip2cc_inet_aton($a) {
  $ip = gethostbyname($a);
  return sprintf("%u", ip2long($ip));
}

function _ip2cc_batch_count($filename) {
  $count = 0;
  if ($fd = fopen(drupal_get_path('module','ip2cc').'/'.$filename, 'r')) {
    while (!feof($fd)) {
      $line = fgets($fd);
      $count++;
    }
    fclose($fd);
  }
  return $count;
}

function _ip2cc_batch_insert($filename,$start=0,$end=-1) {
  if ($fd = fopen(drupal_get_path('module','ip2cc').'/'.$filename, 'r')) {
    for($i=0; $i<$start; $i++) {
      $line = fgets($fd);
    }
    $i = $start;
    while (($i <= $end || $end == -1) && !feof($fd)) {
      $line = substr(rtrim(fgets($fd)),0,-1);
      db_query($line);
      $line = NULL;
      $i++;
    }
    fclose($fd);
  }
}

?>
