<?php

// $Id$

/**
 * @file
 * Administrative helpers for warmshowers.org - mostly reports
 * 
 */

function adminsupport_perm() {
	return array(
	'view administrative reports',
	);
}

/**
 * Implementation of hook_menu().
 */
function adminsupport_menu($may_cache) {
	$items = array();

	if ($may_cache) {
		$items[] = array(
		'path' => 'admin/reports',
		'title' => t('Reports'),
		'callback' => 'adminsupport_reports',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		'weight' => 9,
		);


		$items[] = array(
		'path' => 'admin/reports/bouncing_emails_report',
		'title' => t("List of users with bouncing phplist emails"),
		'description' => t('Shows who has bounced phplist emails. This only shows users who bounced one of the emails to the entire list'),
		'callback' => 'adminsupport_bouncing_emails_report',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);
		$items[] = array(
		'path' => 'admin/reports/full_member_list',
		'title' => t("Full Member List"),
		'description' => t('The entire WSL as a single-page list'),
		'callback' => 'adminsupport_full_member_list',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		'weight' => -9,
		);
		$items[] = array(
		'path' => 'admin/reports/dups_report',
		'title' => t("Duplicate Users Report"),
		'description' => t('This report looks for duplicate users by name and location, and does a pretty good job. A couple of false positives are in there (people with two houses) but there are a few dups in there'),
		'callback' => 'adminsupport_dups_report',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		'weight' => 5,
		);
		$items[] = array(
		'path' => 'admin/reports/profile_update',
		'title' => t("Stalest Accounts, showing last update"),
		'description' => t('Shows usrs who are really behind in updating their profile. Most of these will end up being people we want to delete'),
		'weight'=>9,
		'callback' => 'adminsupport_profile_update_report',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);
		$items[] = array(
		'path' => 'admin/reports/recent_new_users',
		'title' => t("Recent New Users (including blocked users)"),
		'description' => t('The most recent new users, including blocked users, in reverse order of creation'),
		'weight' => 5,
		'callback' => 'adminsupport_recent_new_users',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);
		$items[] = array(
		'path' => 'admin/reports/blocked_users',
		'title' => t("Blocked Users"),
		'description' => t('Blocked users'),
		'weight' => 5,
		'callback' => 'adminsupport_blocked_users',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);

		$items[] = array(
		'path' => 'admin/reports/street_city_country_dups',
		'title' => t("Check for duplicates by looking at street-city-country)"),
		'description' => t('Uses the street + city + country to look for duplicate users, and does find several. Some of these will be false positives (roommates who both signed up, etc.)'),
		'weight' => 5,
		'callback' => 'adminsupport_street_city_country_dups',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);

		$items[] = array(
		'path' => 'admin/reports/user_creation_report',
		'title' => t("User Creation Report"),
		'description' => t('Interesting report of how many users were created when, and how membership growth is going'),
		'weight'=>9,
		'callback' => 'adminsupport_user_creation_report',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);
		$items[] = array(
		'path' => 'admin/reports/missing_location_elements',
		'title' => t("Users with missing full name, city, province, or country"),
		'description' => t('Looks for users with missing important elements in their profiles so we can get them to update them (or update them ourselves)'),
		'weight'=>5,
		'callback' => 'adminsupport_missing_location_elements',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);
		$items[] = array(
		'path' => 'admin/reports/missing_records',
		'title' => t("Users with missing location or wsuser table records"),
		'description' => t('Shows users with inconsistent database entries. These seem to be all Russian spammers and should be deleted'),
		'weight'=>5,
		'callback' => 'adminsupport_missing_records',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);

		$items[] = array(
		'path' => 'admin/reports/member_name_town_search',
		'title' => t("Member name, username, and town/city search"),
		'description' => t('Search for a phrase in member name, username, or town/city'),
		'weight'=>5,
		'callback' => 'drupal_goto',
		'callback arguments' => array('search/wsuser'),
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);

		$items[] = array(
		'path' => 'admin/reports/member_list',
		'title' => t("List members on one page (per country)"),
		'description' => t('List members from a country on a single page'),
		'weight'=>5,
		'callback' => 'drupal_goto',
		'callback arguments' => array('member_list'),
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);
		$items[] = array(
		'path' => 'admin/reports/login_problems',
		'title' => t("List of members probably having login problems"),
		'description' => t('Members with more than one session on a single computer'),
		'weight'=>5,
		'callback' => 'adminsupport_user_login_problems',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);
		$items[] = array(
		'path' => 'admin/reports/unreachable_report',
		'title' => t("List of unreachable and stale members"),
		'weight'=>5,
		'callback' => 'adminsupport_unreachable_report',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);
		$items[] = array(
		'path' => 'admin/reports/password_requests',
		'title' => t("Requests for new passwords"),
		'weight'=>5,
		'callback' => 'adminsupport_password_requests',
		'access' => user_access('view administrative reports'),
		'type' => MENU_NORMAL_ITEM,
		);




	} else 	{ // Not cached


		$items[] = array('path' => 'user/' . arg(1) . '/admin',
		'title' => t('misc admin'), 
		'callback' => 'adminsupport_misc_admin',
		'access' => (user_access('administer users') ),
		'type' => MENU_LOCAL_TASK,
		'weight' => 9,
		);

	}


	return $items;
}



/**
 * The /admin/reports management menu hook. 
 * Just used to get a list of the available reports
 *
 * @return content for page
 */
function adminsupport_reports() {
	  // Check database setup if necessary
  if (function_exists('db_check_setup') && empty($_POST)) {
    db_check_setup();
  }

  $menu = menu_get_item(NULL, 'admin/reports');
  $content = system_admin_menu_block($menu);

  $output = theme('admin_block_content', $content);

  return $output;

	return "hi there";

	$sql = "select * from {menu} where path like 'admin/reports/%'";
	$result = db_query($sql);

	$output .= "<dl>";

	// Get the ones that come out of the menu table
	while ($row = db_fetch_object($result)) {
		$output .= "<dt><a href='/$row->path'>$row->title</a></dt>";
	}

	// Now do a temp table etc to get the ones out of url_alias + node table
	$sql = "create temporary table temp_junk select right(u.src,length(u.src) - 5) as node_id , pid, src, dst
		from url_alias u
		where dst like 'admin/reports/%'";

	$result = db_query($sql);

	$sql = "select * from {temp_junk}, {node} where nid = node_id";
	$result=db_query($sql);
	while ($row = db_fetch_object($result)) {
		$output .= "<dt><a href='/$row->dst'>$row->title</a></dt>";
		//$output .= "<dt><a href='/$row->path'>".$row->title."</a></dt><dd>".$row->description."</dd>";
	}

	$output .= "</dl>";


	return $output;
}



function adminsupport_bouncing_emails_report() {

	$output .= <<<END
	List of users who have bounced email messages and are not already marked as unreachable:<br/><br/>
<br/>
END;


//	$count = db_fetch_object(db_query("SELECT count(*) result_count FROM roger_plst1.phplist_user_user p, users u, wsuser w where p.foreignkey = u.uid and u.uid=w.uid and !w.isunreachable and bouncecount >0"));
//
//	$output .= "<b>Total bouncing emails: $count->result_count<br/><br/>";
//
//
//	$query .= '  ';
//

  $query =<<<END
    select concat('<a href="/user/', u.uid, '/edit">',u.uid,'</a>') ID, 
	    name Username, date(from_unixtime(access)) 'Last Site Access', 
	    p.bouncecount "Total Bounces", date(b.time) "Latest Bounce",
	    concat('<a href="mailto:',mail,'">',mail,'</a>') Emaillink
	    FROM roger_plst1.phplist_user_user p, roger_plst1.phplist_user_message_bounce b,users u, wsuser w 
	    where p.foreignkey = u.uid and p.id = b.user and u.uid=w.uid 
      and u.status and !w.isunreachable 
	    and bouncecount >0 
	    and time > '2007-11-01'
	    group by u.uid order by u.uid,time
END;

	$output .= table_output($query);
	return $output;

}


function adminsupport_full_member_list () {
	$output .= <<<END
	List of all users, sorted by uid. Includes blocked, stale, and unreachable users and shows availability status. You might want to save this to disk, because it's quite a large download.<br/>
<br/>
END;

	$query = 'select concat(\'<a href="/user/\', u.uid, \'/edit">\',u.uid,\'</a>\') ID, ';
	$query .= "if(status, 'Unblocked', 'Blocked') Status, if(w.isunreachable, 'Unreachable','OK') Unreachable, if(w.isstale,'Stale', 'OK') Stale,";
	$query .= "if(notcurrentlyavailable, 'Not', 'Available') Availability, ";
	$query .= "u.name Username, w.fullname 'Full Name', ";
	$query .= ' concat(\'<a href="mailto:\',mail,\'">\',mail,\'</a>\') Emaillink, ';
	$query .= " date(from_unixtime(created)) 'Date Created', street 'Street', city 'City', province 'Province', country 'Country' from {users} u,{user_location} l,{wsuser} w where u.uid = l.oid and u.uid = w.uid and u.uid>99 order by u.uid";
	//$search_results .= "Query: ". check_plain($query) . "<br/>";

	$output .= table_output($query);

	return $output;
}

function adminsupport_dups_report() {
	$output .= 'This report looks for duplicate records in the database by checking lastname-state-country.
<br/>
The duplicate records are listed together as pairs.
<br/><br/>';


	$query2 = "create temporary table junktemp select substring_index(w.fullname,' ',-1) name, l.country from {user_location} l, {users} u, {wsuser} w where w.fullname != '' and u.uid = l.oid and u.uid=w.uid and u.status
group by w.fullname, country having count(*)>1";
	$res = db_query($query2);

	$query3 = 'select concat(\'<a href="/user/\', u.uid, \'/edit">\',u.uid,\'</a>\') ID, ';
	$query3 .=" substring_index(w.fullname,' ',-1) 'Last Name', w.fullname 'Full Name', l.street, l.city, ulp.description Province, l.country, u.name Username, u.mail Email from {users} u, {user_location} l,  {wsuser} w, {user_location_provinces} ulp, junktemp t where u.uid = l.oid and u.uid=w.uid and l.country=ulp.country and l.province=ulp.province and substring_index(w.fullname,' ',-1) = t.name and l.country=t.country and u.status order by substring_index(w.fullname,' ',-1), l.country";

	$output .= table_output($query3);


	return $output;
}

function adminsupport_profile_update_report() {
	$output .= "This report shows the count of profiles that have been updated and how long it's been since they've been updated. It does not include profiles already marked as unreachable or stale.<br/><br/>";

	$count = db_fetch_object(db_query("select count(*) result_count from users u, wsuser w  where u.uid=w.uid and  u.status >0  and u.uid > 99 and !w.isunreachable and !w.isstale"));

	$output .= "<b>Total active users: $count->result_count<br/><br/>";

	$query .= "select year(from_unixtime(access)) 'Year Last Updated', 
		count(*) 'Number of profiles updated' 
		from users  u, wsuser w
		where u.uid=w.uid and u.uid > 99 and u.status > 0 
    and !w.isstale and !w.isunreachable group by year(from_unixtime(access)) 
		order by year(from_unixtime(access)) desc";

	$output .= table_output($query);


	$output .= "<hr/>";
	$staledays = 365;
	$count = db_fetch_object(
    db_query(
      "select count(*) result_count from users u, wsuser w  
        where u.uid=w.uid and  u.status >0  and u.uid > 99 
        and !w.isunreachable and !w.isstale 
        and datediff(now(),from_unixtime(u.access)) > $staledays"));
	$output .= "Active accounts stale by more than $staledays days (showing last update)<br/><br/>";
	
	$query = 'select from_unixtime(u.access) "Last Update", 
				concat(\'<a href="/user/\', 
				u.uid, \'/edit">\',u.uid,\'</a>\') ID, 
				u.name Username, 
				concat(\'<a href="mailto:\',u.mail,\'">\',u.mail,\'</a>\') Emaillink 
				from users u , wsuser w
				where u.uid = w.uid and u.uid > 99 and u.status 
        and !w.isstale and !w.isunreachable
        and datediff(now(),from_unixtime(u.access)) > '. $staledays .' 
				order by u.access ';

	$output .= table_output($query);


	return $output;

}

function adminsupport_recent_new_users () {
	$num_users=variable_get('adminsupport_num_recent_new_users',200);
	$output .= "List of the most recent $num_users new users, sorted in reverse chronological order. Includes blocked users.<br/><br/>";
	

  $query = 'select concat(\'<a href="/user/\', u.uid, \'/edit">\',u.uid,\'</a>\') ID, 
  				if(status, "Unblocked", "Blocked") Status, 
  				u.name Username, w.fullname "Full Name", 
  				concat(\'<a href="mailto:\',mail,\'">\',mail,\'</a>\') Emaillink, 
  				date(from_unixtime(created)) "Date Created", 
  				street "Street", city "City", province "Province", country "Country" 
  				from {users} u,{user_location} l, {wsuser} w
  				where u.uid = l.oid and u.uid>99 and u.uid=w.uid 
  				order by u.uid desc limit %d';
   $output .= table_output($query, null, $num_users);
		
  return $output;

}

function adminsupport_blocked_users () {
$output .= "<H2>List of all blocked users</h2>";	


  $query = 'select concat(\'<a href="/user/\', u.uid, \'/edit">\',u.uid,\'</a>\') ID, 
  				if (m.msg_cnt = -1, "Opted out", m.msg_cnt) "Num Reminders", 
  				date(from_unixtime(m.last_reminder)) "Last Reminder",
  				date(from_unixtime(created)) "Date Created", 
  				u.name Username, w.fullname "Full Name", 
  				concat(\'<a href="mailto:\',mail,\'">\',mail,\'</a>\') Emaillink, 
  				province "Province", country "Country" 
  				from {users} u left join {manage_blocked} m on (u.uid=m.uid),{user_location} l, {wsuser} w
  				where u.uid = l.oid and u.uid>99 and u.uid=w.uid and !u.status
  				order by u.uid asc';

   $output .= table_output($query, null);
		
  return $output;

}

function adminsupport_notcurrentlyavailable_users() {

	$output .= "List of not-currently-available users, sorted by uid. <br/><br/>";

	$notcurrentlyavailable_count = db_fetch_object(
	db_query(
	"select count(*) result_count
			from {users} u, {wsuser} w 
			where w.notcurrentlyavailable and u.status and u.uid = w.uid and u.uid > 99"));
	$total_count = db_fetch_object(
	db_query(
	"select count(*) result_count
			from {users} u
			where u.status  and u.uid > 99"));

	$output .= "<b>Total 'not currently available' users: $notcurrentlyavailable_count->result_count of $total_count->result_count total users ("
	. floor($notcurrentlyavailable_count->result_count/$total_count->result_count*100)
	. "%)<br/><br/>";

	$query = 'select concat(\'<a href="/user/\', u.uid, \'/edit">\',u.uid,\'</a>\') ID,
				if(status, "Unblocked", "Blocked") Status, 
				if(isunreachable,"Unreachable", "OK") "Unreachable?",
				if(isstale,"Stale","OK") "Stale?",
				if(notcurrentlyavailable, "Not", "Available") Availability, 
				u.name Username, w.fullname "Full Name", 
				concat(\'<a href="mailto:\',mail,\'">\',mail,\'</a>\') Emaillink, 
				date(from_unixtime(created)) "Date Created", street "Street", 
				city "City", province "Province", country "Country"
				from {users} u,{user_location} l,{wsuser} w 
				where w.notcurrentlyavailable and u.uid = l.oid 
				and u.uid = w.uid and u.uid>99  and u.status
				order by u.uid';
	
	$output .= table_output($query);

	return $output;

}

function adminsupport_street_city_country_dups() {

	$output .= "This report looks for duplicate records in the database by checking street-city-country.<br/>
			   The duplicate records are listed together as pairs.<br/>";


	$query = "create temporary table tmp_street_city
			select street, city, country 
			from {user_location} l, {users} u where l.street != '' 
			and l.city != '' and u.uid = l.oid
			group by street, city,country having count(*)>1";
	$res = db_query($query);

	$query = 'select concat(\'<a href="/user/\', u.uid, \'/edit">\',u.uid,\'</a>\') ID,
			u.name Username, u.mail Email, w.fullname "Full Name",
			l.street, l.city, l.country 
			from {users} u, {user_location} l, {wsuser} w, tmp_street_city t 
			where u.uid = l.oid  and u.uid=w.uid and l.street=t.street and u.status
			and l.city=t.city and l.country=t.country 
			order by street, city, country';
	$output .= table_output($query);

	return $output;
}

function adminsupport_user_creation_report() {
		

//  $output .= "<br/><br/>Users created by month<br/><br/>";
//  $query = "select concat(month(from_unixtime(created)), '/', year(from_unixtime(created))) 'Month', 
//  	count(*) 'Users Created' 
//  	from {users} u 
//  	where uid>99 and u.status 
//  	group by concat(month(from_unixtime(created)), '/', year(from_unixtime(created))) order by created desc";
//  $output .= table_output($query);
		

  $output .= "<h3>Users created by year</h3>";
  $query = "select year(from_unixtime(created)) 'Year', count(*) 'Users Created', 
  	count(if(status=0,1,NULL)) 'Blocked users'
  	from {users} u 
  	where uid>99 
  	group by year(from_unixtime(created)) order by created desc";
  $output .= table_output($query);
		

  $output .= "<h3>Biggest Single Days</h3>";
  $query = "select date(from_unixtime(created)) 'Date', count(*) 'Users Created' 
  	from {users} u where u.status and u.uid>99
  	group by date(from_unixtime(created)) 
  	order by 'Users Created' desc
  	limit 20";

  $output .= table_output($query);
  return $output;

}

function adminsupport_missing_location_elements() {
	
	$output .= "<h2>List of users with no city, province, country, or name. </h2>";

  $query = 'select concat(\'<a href="/user/\', u.uid, \'/edit">\',u.uid,\'</a>\') ID, 
  	u.name Username,  w.fullname "
  	Full name",concat(\'<a href="mailto:\',mail,\'">\',mail,\'</a>\') Emaillink, 
  	date(from_unixtime(created)) "Date Created", 
  	street "Street", city "City", province "Province", country "Country" 
  	from {users} u,{user_location} l, {wsuser} w 
  	where u.uid = l.oid and u.uid = w.uid and u.uid>99 and u.status 
  	and (l.province="" or l.province is null or l.city= "" or l.city is null 
  	or w.fullname ="" or w.fullname is null or l.country="" or l.country is null) 
  	order by u.uid desc';

  $output .= table_output($query);
		
  return $output;

}

function adminsupport_missing_records() {
	$output .= "<h2>List of users with invalid missing database info. (Location or WSuser records missing; only USER record created)</h2>";

	$query = 
	'select concat(\'<a href="/user/\', u.uid, \'/edit">\',u.uid,\'</a>\') ID,
  		if(status, "Unblocked", "Blocked") Status, u.name Username, 
  		concat(\'<a href="mailto:\',mail,\'">\',mail,\'</a>\') Emaillink, 
  		date(from_unixtime(created)) "Date Created" 
  		from users u 
  		where uid > 99 
  		and (u.uid not in (select uid from {wsuser}) or u.uid not in (select oid from {user_location}) )
  		order by u.uid desc';

	$output .= table_output($query);

	return $output;
}

function adminsupport_unreachable_report() {
	$output .= "<h2>List of unreachable and stale members</h2>";

	$query = 
	'select concat(\'<a href="/user/\', u.uid, \'/edit">\',u.uid,\'</a>\') ID,
  		if(status, "Unblocked", "Blocked") Status, 
  		if(isunreachable,"Unreachable","OK") as "Unreachable?",
  		if(isstale,"Stale","OK") as "Stale?",
  		u.name Username, 
  		concat(\'<a href="mailto:\',mail,\'">\',mail,\'</a>\') Emaillink, 
  		date(from_unixtime(created)) "Date Created" 
  		from {users} u, {wsuser} w
  		where u.uid=w.uid and u.uid > 99 
  		and (w.isunreachable or w.isstale)
  		order by u.uid desc';

	$output .= table_output($query);

	return $output;
}

function adminsupport_password_requests() {
	$output .= "<h2>Password Requests</h2>";

	$query = 'select from_unixtime(timestamp) timestamp,message,hostname 
		from watchdog 
		where message like "Password reset instructions%"
		 or message like "User%used one-time login%"
		 order by timestamp desc';

	$output .= table_output($query);

	return $output;
}



function table_output($query, $header=array(), $args=array()) {
	$result=db_query($query,$args);
	$num_rows = db_num_rows($result);
	$output .= "<h3>$num_rows results from query</h3>";

	$rows=array();
	while ($row = db_fetch_array($result)) {
		$rows[] = $row;
		if (!count($header) && count($rows) == 1) {
			foreach($rows[0] as $key=>$val) {
				$header[] = $key;
			}
		}
		;
	}
	return $output . theme('report_table',$header, $rows);
}

function csv_output($query, $header=array(), $args=array()) {
	$result=db_query($query,$args);

	$rows=array();
	while ($row = db_fetch_array($result)) {
		$rows[] = $row;
		if (!count($header) && count($rows) == 1) {
			foreach($rows[0] as $key=>$val) {
				$header[] = $key;
			}
		}
		;
	}
	return theme('tabtext',$header, $rows);
}


function adminsupport_user_login_problems() {
	$output .= "<h2>Here's a list of users (probably) having login problems</h2>";

	$sql = "create temporary table numsessions select uid, count(*) numsessions from sessions where uid>0 group by uid, hostname";
	$result = db_query($sql);
	$count = db_fetch_object(db_query("select count(*) result_count from numsessions where numsessions >1"));

	$sql = "select u.uid, name, numsessions, hostname,from_unixtime(s.timestamp) from users u, sessions s, numsessions n
   where u.uid=n.uid and u.uid=s.uid and numsessions >1";

	$period = db_fetch_object(db_query("select min(from_unixtime(timestamp)) start, max(from_unixtime(timestamp)) finish, count(*) numsessions from sessions where uid"));

	$output .= "<h3>Total users having trouble: $count->result_count</h3> (This is out of a total of $period->numsessions sessions in the period $period->start to $period->finish)";

	$output .= table_output($sql);


	return $output;
}

function adminsupport_change_user_dates_form() {
	$uid = arg(1);
	$user = user_load(array('uid' => $uid));
	
	$form['changedates'] = array(
		'#title' => t("<b>Change user dates</b>"),
		'#description' => t("Change the database dates on a user"),
		'#type' => 'fieldset',
	);
	
	$form['changedates']['instructions'] = array(
		'#type' => 'markup',
		'#value' => "<h4>Changing dates for user $user->name ($user->fullname)</h4><p>Use this form to update the created or last-login date of a user.
					The last-login date is used to determine when the user is 'stale' and should
					be retired, contacted, perhaps removed from the system.</p>",
	);
	$form['changedates']['createddate'] = array(
		'#type' => 'textfield',
		'#size'=> 10,
		'#maxlength'=>10,
		'#title' => "New created date (currently " . date_from_timestamp($user->created) . ")",
		'#description' => t("In the form YYYY-MM-DD. Leave it blank to leave it unchanged."),
	);
	$form['changedates']['logindate'] = array(
		'#type' => 'textfield',
		'#size'=> 10,
		'#maxlength'=>10,
		'#title' => t("New last-login date (currently last-login is " . date_from_timestamp($user->login) .  " and access is ". date_from_timestamp($user->access). ")"),
		'#description' => t("In the form YYYY-MM-DD. Leave it blank to leave it unchanged."),
	);
	$form['changedates']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);
	return $form;
	
}

function adminsupport_change_user_dates_form_validate($form_id,$form_values) {
	$created = $form_values['createddate'];
	$changed = $form_values['logindate'];
	if (strlen($created) && timestamp_from_date($created) < 100) {
		form_set_error('createddate', "Created date must be in the form YYYY-MM-DD");
	}
	if (strlen($changed) && timestamp_from_date($changed) < 100) {
		form_set_error('logindate', "Login date must be in the form YYYY-MM-DD");
	}
}
function adminsupport_change_user_dates_form_submit($form_id, $form_values) {
	$uid = arg(1);
	$user = user_load(array('uid' => $uid));

	if (strlen($form_values['createddate'])) {
		$result = db_query("update {users} set created=%d where uid=%d", 
			timestamp_from_date($form_values['createddate']), $uid);
		if (db_affected_rows()==1) {
		
			$announcement[] = "Changed created date from " . 
				date_from_timestamp($user->created) . " to " . $form_values['createddate'];
		} else {
			drupal_set_message("Failed to update 'created' time",'error');
		}
		
	}
	if (strlen($form_values['logindate'] )) {
		$result = db_query("update {users} set login=%d,access=%d where uid=%d", 
			timestamp_from_date($form_values['logindate']), timestamp_from_date($form_values['logindate']),$uid);
		if (db_affected_rows()==1) {
		
			$announcement[] = "Changed login date from " . 
				date_from_timestamp($user->login) . " to " . $form_values['logindate'];
		} else {
			drupal_set_message("Failed to update 'login' time",'error');
		}
	}
	foreach ($announcement as $key=>$val) {
		drupal_set_message($val);
	}
	
	
}

function date_from_timestamp($timestamp) {
	if (!$timestamp) {
		return t("never");
	} else {
		return date('Y-m-d',$timestamp);
	}
}
function timestamp_from_date($date) {
		list($year, $month, $day) = split('-', $date);
		$unixtime = mktime(0,0,0,$month,$day,$year);
		if ($month<1 || $year < 1900) {
			return -1;
		}
		return $unixtime;

}

function adminsupport_notreachable_form() {
	$uid = arg(1);
	$user = user_load(array('uid' => $uid));
	
	$form['notreachable'] = array(
		'#title' => t("<b>Set user to unreachable or stale</b>"),
		'#type' => 'fieldset',
	);
	
	$form['notreachable']['instructions'] = array(
		'#type' => 'markup',
		'#value' => "<p>Set a user as 'unreachable' or 'stale'. Unreachable is when their email bounces or it's reported that they can't be reached by phone.  Stale means that they haven't been heard from in a long time, and we consider them to be probably gone. </p>",
	);
	$form['notreachable']['unreachable'] = array(
		'#type' => 'checkbox',
		'#title' => "Unreachable?",
		'#default_value' => $user->isunreachable,
		'#description' => $user->isunreachable ? "Was set as unreachable on " . date_from_timestamp($user->unreachable_date) : "",

	);
	$form['notreachable']['unreachable_reason'] = array(
		'#type' => 'textfield',
		'#title' => t("Reason"),
		'#description' => t("Please put why you are marking them as unreachable"),
		'#default_value' => $user->unreachable_reason,
	);
	$form['notreachable']['isstale'] = array(
		'#type' => 'checkbox',
		'#title' => "Stale?",
		'#default_value' => $user->isstale,
		'#description' => $user->isstale ? "Was set as stale on " . date_from_timestamp($user->isstale_date) : "",

	);
	$form['notreachable']['isstale_reason'] = array(
		'#type' => 'textfield',
		'#title' => t("Reason"),
		'#description' => t("Please put why you are marking them as stale"),
		'#default_value' => $user->isstale_reason,
	);
	$form['notreachable']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);
	return $form;
	
}

function adminsupport_notreachable_form_submit($form_id, $form_values) {
	$uid = arg(1);
	$user = user_load(array('uid' => $uid));
	
    db_query("update {wsuser} w
    	set isstale=%d, isstale_reason='%s', isstale_date=unix_timestamp(),
    	    isunreachable=%d, unreachable_date=unix_timestamp(), unreachable_reason='%s'
    	where uid=%d", $form_values['isstale'], $form_values['isstale_reason'], 
    	$form_values['unreachable'], $form_values['unreachable_reason'],
    	$user->uid);
    if ($form_values['unreachable'] && module_exists('notify')) {
    	db_query("update {notify} set status=0 where uid=%d",$uid);
    	drupal_set_message("Turned off notifications for user");
    }
	drupal_set_message("Updated unreachable and stale status");	
	
	
}

function adminsupport_misc_admin() {
	
	$output .= drupal_get_form(adminsupport_change_user_dates_form);
	$output .= drupal_get_form(adminsupport_notreachable_form);
	
	return $output;
}



  
/**
 * Return a themed report table; special handling for header cells names \@whatever. They get 
 * themed for potential replacement (as in email obfuscation, etc.
 *
 * @param $header
 *   An array containing the table headers. Each element of the array can be
 *   either a localized string or an associative array with the following keys:
 *   - "data": The localized title of the table column.
 *   - "field": The database field represented in the table column (required if
 *     user is to be able to sort on this column).
 *   - "sort": A default sort order for this column ("asc" or "desc").
 *   - Any HTML attributes, such as "colspan", to apply to the column header cell.
 * @param $rows
 *   An array of table rows. Every row is an array of cells, or an associative
 *   array with the following keys:
 *   - "data": an array of cells
 *   - Any HTML attributes, such as "class", to apply to the table row.
 *
 *   Each cell can be either a string or an associative array with the following keys:
 *   - "data": The string to display in the table cell.
 *   - "header": Indicates this cell is a header.
 *   - Any HTML attributes, such as "colspan", to apply to the table cell.
 *
 *   Here's an example for $rows:
 *   @verbatim
 *   $rows = array(
 *     // Simple row
 *     array(
 *       'Cell 1', 'Cell 2', 'Cell 3'
 *     ),
 *     // Row with attributes on the row and some of its cells.
 *     array(
 *       'data' => array('Cell 1', array('data' => 'Cell 2', 'colspan' => 2)), 'class' => 'funky'
 *     )
 *   );
 *   @endverbatim
 *
 * @param $attributes
 *   An array of HTML attributes to apply to the table tag.
 * @param $caption
 *   A localized string to use for the <caption> tag.
 * @return
 *   An HTML string representing the table.
 */
function theme_report_table($header, $rows, $attributes = array(), $caption = NULL) {
  $output = '<table'. drupal_attributes($attributes) .">\n";

  if (isset($caption)) {
    $output .= '<caption>'. $caption ."</caption>\n";
  }

  // Format the table header:
  if (count($header)) {
    $ts = tablesort_init($header);
    $output .= ' <thead><tr>';
    foreach ($header as $cell) {
      $cell = tablesort_header($cell, $header, $ts);
      $output .= _theme_table_cell($cell, TRUE);
    }
    $output .= " </tr></thead>\n";
  }

  // Format the table rows:
  $output .= "<tbody>\n";
  if (count($rows)) {
    $flip = array('even' => 'odd', 'odd' => 'even');
    $class = 'even';
    foreach ($rows as $number => $row) {
      $attributes = array();

      // Check if we're dealing with a simple or complex row
      if (isset($row['data'])) {
        foreach ($row as $key => $value) {
          if ($key == 'data') {
            $cells = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $cells = $row;
      }

      // Add odd/even class
      $class = $flip[$class];
      if (isset($attributes['class'])) {
        $attributes['class'] .= ' '. $class;
      }
      else {
        $attributes['class'] = $class;
      }

      // Build row
      $output .= ' <tr'. drupal_attributes($attributes) .'>';
      $i = 0;
      foreach ($cells as $cell) {
      	// Handle replaceable items. Email would mean to potentially obfuscate the email
      	$cell = theme('replaceable_cell',$cell, $header[$i]);
      	$cell = tablesort_cell($cell, $header, $ts, $i++);
      	$output .= _theme_table_cell($cell, $header);
      }
      $output .= " </tr>\n";
    }
  }

  $output .= "</tbody></table>\n";
  return $output;
}

function theme_replaceable_cell($cell, $header) {
	if ($header == "Email") {
		$cell= theme('email_addr',$cell);
	}
	return $cell;
	
	
}

/**
 * Themeable function to handle tab-delimited text files
 *
 * @param array $header    
 *    The single-dimensional array of column-headers. 
 * @param array-of-arrays $rows
 *    The array of array rows. Each array row has an item for each column
 * @return string
 *    Returns the csv file data
 */
function theme_tabtext($header, $rows) {
	
	// Output the header
	foreach ($header as $item) {
			$item = str_replace("\t","", $item);
			$output .= $item . "\t";
		
	}
	$output .= "\n";
	foreach ($rows as $row) {
		$i=0;
		foreach ($row as $cell) {
			// Handle replaceable items. Email would mean to potentially obfuscate the email
      		$cell = theme('replaceable_cell',$cell, $header[$i]);

			$item = str_replace("\t","", $cell);
			$output .= $cell . "\t";
			$i++;
		}
		$output .= "\n";
	}
	return $output;
}

