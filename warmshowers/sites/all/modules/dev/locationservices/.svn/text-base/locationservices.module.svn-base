<?php

// $Id$

/**
 * @file
 * Administrative helpers for warmshowers.org - mostly reports
 * 
 */

function locationservices_perm() {
	return array(
	'view administrative reports',
	);
}

/**
 * Implementation of hook_menu().
 */
function locationservices_menu($may_cache) {
	$items = array();

	if ($may_cache) {
		$items[] = array(
			'path' => 'location_country_locator_service',
			'title' => t("Get lat/lon from countrycode"),
			'callback' => 'location_country_locator_service',
			'access' => user_access('access content'),  // TODO: Revisit this perm
			'type' => MENU_CALLBACK,
			
		);
		
		$items[] = array(
			'path' => 'location_autocomplete',
			'title' => t("Location Autocomplete backend function"),
			'callback' => 'location_autocomplete',
			'access' => user_access('access content'),  // TODO: Revisit this perm
			'type' => MENU_CALLBACK,
			
		);


	}

	return $items;
}

function location_country_position_from_country($country) {
	// This query uses user_location_countries to get the centers of the countries
	$result = db_query("SELECT l.country country_code, l.description country, latitude, longitude, area
  	FROM {user_location_countries} l, {geonames_countryinfo} g
  	WHERE l.country='%s' and l.country = iso_alpha2",
	$country);

	// This one uses the country capital from the geonames db
	// 	$result = db_query("select i.name country, latitude, longitude, area
	// 				from {geonames} g, {geonames_countryinfo} i
	// 				where country_code='%s' and feature_code='pplc'
	// 				and country_code=iso_alpha2", $country);

	$item = db_fetch_object($result);
	if (db_num_rows($result) != 1) { return null; }
  	$item->defaultzoom = round(10-log($item->area/1000,4));
	
	return $item;
}

function location_country_locator_service($country) {
  $res = location_country_position_from_country($country);
  print drupal_to_js($res);
  exit();
}




function location_autocomplete($string) {
  $limit = 15;  // Max items we'll return
  $cities = array();
  $result=null;
  $country_code=strtoupper(arg(1));
  

  $result = db_query_range(
  	"SELECT distinct g.name cityname, a.name provname, g.country_code,
  		latitude, longitude, g.admin1_code, g.feature_code
  	FROM {geonames} g,{geonames_adm1} a
  	WHERE g.country_code='%s' 
  		and g.ansiname like('%s%%') and feature_code in ('ppl', 'ppla', 'pplc', 'adm1') 
  		and g.country_code = a.country_code and g.admin1_code=a.adm1_code
  		and (population > 1000 or feature_code='adm1')
  		order by (feature_code='adm1') desc, g.population desc", $country_code, arg(2), 0, $limit);

  while ($city = db_fetch_array($result)) {
  	if ($city['feature_code'] == 'ADM1') {  // Treat state capital as center of a state
  		$place = $city['provname'] . " (state/province)";
		$cities[$place] = $city['latitude'] . "|" . $city['longitude'];
  	} else {
	  	$place =  $city['cityname'] . ", " . $city['provname'] ;
		$cities[$place ] = $city['latitude'] . "|" . $city['longitude'];
  	}
  	
  	
  }
  print drupal_to_js($cities);
  exit();
}



function user_location_get_browser_country() {
	
	$ip = $_SERVER['REMOTE_ADDR'];
	if ($ip == '127.0.0.1') {
		$ip = "192.94.73.1";   // Dummy to US for localhost
		$ip = "62.236.106.181"; // Finland
		//$ip = "0.0.0.0";
	} else if (!strncmp($_SERVER['REMOTE_ADDR'],'192.168',7)) {
		$ip = "212.100.232.194"; // In great britain
	}
	// $ip = "212.100.232.194"; // In great britain
	//$ip = "192.94.73.1"; // In US
	//$ip = "61.151.243.214"; // In China
	//$ip = "62.236.106.181"; // Finland
	if (function_exists('ip2cc_get_country')) {
		if ($cc = ip2cc_get_country($ip)) {
			return strtolower($cc->country_code);
		} else {
			return null;
		}
	}
}

function location_get_browser_location() {
	if ($mycountry = user_location_get_browser_country()) {
		return location_country_position_from_country($mycountry);
	} 
	return null;
}


/**
 * Return array of supported countries (ISOCOde=>countryname)
 *
 * @return array of countries
 */
function _user_location_supported_countries() {
	static $supported_countries = array();

	// If this function has already been called this request, we can avoid a DB hit.
	if (!empty($supported_countries)) {
		return $supported_countries;
	}

	// Try first to load from cache, it's much faster than the scan below.
	$cache = cache_get('user_location:supported-countries');
	if (!empty($cache)) {
		$supported_countries = unserialize($cache->data);
	} else {
		// '<ISO two-letter code>' => '<English name for country>'
		$sql = 'select lcase(country) country, description from {user_location_countries} order by description';
		$sqlresult = db_query($sql);
		while ($rec = db_fetch_object($sqlresult)) {
			$supported_countries[$rec->country] = $rec->description;
		}

		if (count($supported_countries)) {
			cache_set('user_location:supported-countries', 'cache', serialize($supported_countries));
		}
	}

	return $supported_countries;
}

/**
 * Return a list of provinces for the selected country
 *
 * @param unknown_type $country
 * @return unknown
 */
function _user_location_provincelist($country) {
	return _user_location_get_provincecode_to_province_map($country);

}




/**
 * Return array of provinces for given country
 *
 * @param unknown_type $country
 * @return array of provinces (CODE=>Name)
 */
function _user_location_get_provincecode_to_province_map($country="us") {
	$provinces = array();

	$cachename = "user_location:provinces:$country";
	// Try first to load from cache, it's much faster than the scan below.
	$cache = cache_get($cachename);
	if (!empty($cache)) {
		$provinces = unserialize($cache->data);
	} else {
		$sql = 'select lcase(province) province, description from {user_location_provinces} where country = "%s"';
		$sqlresult = db_query($sql, $country);
		
		while ($rec = db_fetch_object($sqlresult)) {
			$provinces[$rec->province] = $rec->description;
		}

		if (count($provinces)) {
			cache_set($cachename, 'cache', serialize($provinces));
		}
	}

	return $provinces;

	
}

